version: '3.9'

services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - 2181:2181
    volumes:
      - ./zookeeper_data:/bitnami
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
    networks:
      - local_network

  cassandra:
    image: cassandra:4.0
    container_name: d_cassandra
    ports:
      - 9042:9042
    volumes:
      - ./cassandra:/var/lib/cassandra
      - ./cassandra/schema.cql:/schema.cql:ro
      - ./data:/data
    environment:
      CASSANDRA_CLUSTER_NAME: c_cluster
    networks:
      - local_network
    command: ["cassandra", "-f"]

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - 9092:9092
    volumes:
      - ./kafka_data:/var/lib/kafka/data
      - ./kafka_log:/tmp/kafka_mounts/logs
      - ./server.properties:/etc/kafka/server.properties:ro
      - ./data:/data
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181/kafka
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - local_network

  schema-register:
    image: confluentinc/cp-schema-registry:latest
    container_name: schema-register
    ports:
      - 8081:8081
    volumes:
      - ./schema-registry.properties:/etc/schema-registry/config.properties:ro
    depends_on:
      - zookeeper
      - kafka
    networks:
      - local_network
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181/kafka
      SCHEMA_REGISTRY_HOST_NAME: schema-register
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,OPTIONS'

  kafka-connect:
    build:
      context: ./
      dockerfile: Dockerfile.kafka
    image: bitnami/kafka:latest
    container_name: kafka_connect
    ports:
      - 8083:8083
    volumes:
      - ./kafka_connect_data:/var/lib/kafka/data
      - ./connectors:/connectors
      - ./data:/data
    depends_on:
      - zookeeper
      - kafka
      - schema-register
      - cassandra
    networks:
      - local_network
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      CONNECT_BOOTSTRAP_SERVER: kafka:9092
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-register:8081'
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-register:8081'
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-register:8081'
    command: connect-standalone /connectors/connector.properties

  spark-master:
    build:
      context: ./
      dockerfile: Dockerfile.spark
    container_name: spark_master
    ports:
      - 8080:8080
      - 7077:7077
    volumes:
      - ./spark/work-dir:/opt/bitnami/spark/work-dir
      - ./spark/.ivy2:/opt/bitnami/spark/.ivy2
    environment:
      SPARK_LOCAL_IP: spark-master
      SPARK_MODE: master
    networks:
      - local_network

  spark-worker:
    build:
      context: ./
      dockerfile: Dockerfile.spark
    container_name: spark_worker
    ports:
      - 8084:8081
    volumes:
      - ./spark/work-dir:/opt/bitnami/spark/work-dir
      - ./spark/.ivy2:/opt/bitnami/spark/.ivy2
    depends_on:
      - spark-master
    networks:
      - local_network
    environment:
      SPARK_MASTER: "spark://spark-master:7077"
      SPARK_WORKER_MEMORY: 1G
      SPARK_WORKER_CORES: 4
      SPARK_MODE: worker

networks:
  local_network:
    driver: bridge
